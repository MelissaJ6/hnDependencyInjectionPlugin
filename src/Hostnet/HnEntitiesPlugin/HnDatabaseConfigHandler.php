<?php
namespace Hostnet\HnEntitiesPlugin;

use Doctrine\DBAL\Connection;

use Symfony\Bridge\Doctrine\RegistryInterface;

use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;

use Symfony\Component\Config\Loader\LoaderResolver;

use Symfony\Component\Config\FileLocator;

use Doctrine\Bundle\DoctrineBundle\DependencyInjection\DoctrineExtension;

use Symfony\Component\DependencyInjection\ContainerBuilder;

/**
 * Alternative for the \sfDatabaseConfigHandler, it reads the config in the Symfony2 format
 *
 * If you want to use this
 * Let your ApplicationConfiguration extend the Hostnet\HnEntitiesPlugin\ApplicationConfiguration
 *
 * If you want to develop on this class, please note that this is very early in the sf1 initialization
 * So you can't use much more then sfConfig::get('sf_environment');
 */
class HnDatabaseConfigHandler
{
  /**
   * @todo make this dynamic
   */
  const DATABASE_ENGINE = 'mysql';

  /**
   * @var ContainerBuilder
   */
  private $container;

  public function __construct(ContainerBuilder $container)
  {
    $this->container = $container;
  }

  /**
   * @see sfConfigHandler::execute()
   * @return string PHP code
   */
  public function execute()
  {
    $debug = $this->container->getParameter('kernel.debug');

    if(strpos(SYMFONY_VERSION, '1.1.') === 0) {
      $output = $this->createSymfony11Output($this->container->get('doctrine'));
    } else if(strpos(SYMFONY_VERSION, '1.3.') === 0 || strpos(SYMFONY_VERSION, '1.4.') === 0) {
      $output = $this->createSymfony14Output($debug, $this->container->get('doctrine'));
    } else {
      throw new \DomainException('Untested Symfony version '.SYMFONY_VERSION.
          ', but maybe one of the others will work');
    }

    // compile data
    return sprintf("<?php\n".
        "// auto-generated by hnDatabaseConfigHandler\n".
        "// date: %s\n\n%s\n",
        date('Y/m/d H:i:s'), $output);
  }

  private function createSymfony11Output(RegistryInterface $registry)
  {
    $output = '';
    foreach($registry->getConnections() as $name => $connection) {
      $config = array('name' => $name, 'dsn' => $this->formatDSN($connection));
      $output .= sprintf('$this->setDatabase("%s", new %s(%s))', $name, $this->getPropelClass(),
          var_export($config, true));
    }
    return $output;
  }

  private function createSymfony14Output($debug, RegistryInterface $registry)
  {
    $output = 'return array(' . PHP_EOL;

    foreach($registry->getConnections() as $name => $connection) {
      /* @var $connection Connection */

      $dsn = sprintf(self::DATABASE_ENGINE . ':dbname=%s;host=%s;port=%s', $connection->getDatabase(),
          $connection->getHost(), $connection->getPort());
      $config = array(
          'classname' => $this->getClassname($debug),
          'dsn' => $dsn,
          'username' => $connection->getUsername(),
          'password' => $connection->getPassword(),
          'persistent' => true,
          'pooling' => true,
          'encoding' => 'utf8',
          'name' => $name
          );
      $output .= sprintf("'%s' => new %s(%s),", $name, $this->getPropelClass(),
          var_export($config, true));
      $output .= PHP_EOL . PHP_EOL;
    }

    $output .= ');';
    return $output;
  }

  /**
   * @todo make "sfPropelDatabase" dynamic, specific for each connection
   * @return string
   */
  private function getPropelClass()
  {
    return 'sfPropelDatabase';
  }

  /**
   * @todo make the mysql bit dynamic
   * @param Connection $connection
   */
  private function formatDSN(Connection $connection)
  {
    return sprintf(self::DATABASE_ENGINE . '://%s:%s@%s:%s/%s',
        $connection->getUsername(),
        $connection->getPassword(),
        $connection->getHost(),
        $connection->getPort(),
        $connection->getDatabase());
  }

  /**
   * @param string $name
   * @param bool $debug
   * @return string
   */
  private function getClassname($name, $debug)
  {
    if($this->container->hasParameter($name . '_database_classname')) {
      return $this->container->getParameter($name . '_database_classname');
    }
    return $debug ? 'DebugPDO' : 'PropelPDO';
  }
}